name: Code Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: '9.4.8'
          enable-stack: true
          stack-version: 'latest'

      - name: Cache Stack dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.stack
            .stack-work
          key: coverage-${{ hashFiles('stack.yaml', 'package.yaml') }}
          restore-keys: |
            coverage-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3 libsqlite3-dev

      - name: Build with coverage
        run: |
          stack build --test --coverage --no-run-tests

      - name: Run tests with coverage
        run: |
          stack test --coverage

      - name: Generate HPC report
        run: |
          stack hpc report --all --destdir .coverage
          
      - name: Convert coverage to Cobertura format
        run: |
          # Install hpc-codecov for better coverage reporting
          stack install hpc-codecov
          hpc-codecov --mix=.stack-work/dist/*/build/ --out=coverage.xml || true

      - name: Generate coverage badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: .github/badges
          generate-coverage-badge: true
          generate-branches-badge: true
          coverage-label: coverage
          colors: '#4c1 #97ca00 #a4a61d #dfb317 #fe7d37 #e05d44'

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ./coverage.xml,.coverage/combined/all/hpc_index.html
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage.xml
          flag-name: haskell-tests

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: 80
          MINIMUM_ORANGE: 60

      - name: Archive coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            .coverage/
            coverage.xml
            .github/badges/

